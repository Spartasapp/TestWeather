{"version":3,"sources":["Components/Weather/Weather.module.css","Components/Redux/weatherApi.js","Components/Redux/localStorageService.js","Components/Redux/weatherReducer.js","Components/Weather/Weather.jsx","App.js","serviceWorker.js","Components/Redux/store.js","index.js"],"names":["module","exports","instance","axios","baseURL","weatherApi","getData","city","get","res","data","response","status","Promise","reject","keys","localStorageService","cities","cityAsString","JSON","stringify","filter","c","i","localStorage","setItem","resolve","parse","getItem","ADD_CITY","initialState","temp","windSpeed","dirOfWind","isResponseFromServer","error","setCurrentCity","type","setError","addCity","loadCitiesSuccess","getWeatherSuccess","speed","deg","Math","floor","reducer","state","action","directionWind","connect","weatherPage","temperature","directionOfTheWind","dispatch","loadCities","a","repositoryService","getWeather","title","getState","main","wind","oldCity","toUpperCase","length","props","useState","setTitle","useEffect","className","style","weather","onChange","e","cityName","currentTarget","value","placeholder","list","onClick","preventDefault","disabled","trim","id","map","key","App","Boolean","window","location","hostname","match","combineReducers","weatherReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4dfbdcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__2KILV\",\"title\":\"Weather_title__2cHml\"};","import * as axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'http://api.openweathermap.org/data/2.5/',\r\n});\r\n\r\nexport const weatherApi = {\r\n    async getData(city) {\r\n        try {\r\n            const res = await instance.get(`weather?q=${city}&APPID=99f7b0899ae20d84d4ec3109e0e0d781`)\r\n            return res.data;\r\n        } catch(error) {\r\n            if (error.response.status === 404) {\r\n                return Promise.reject(\"City not found\");\r\n            } else {\r\n                return Promise.reject(\"Some error occurred\")\r\n            }\r\n\r\n        }\r\n    }\r\n}","const keys = { cities: 'cities' };\r\nconst maxCitiesCountForSaving = 3;\r\n\r\n\r\nexport const localStorageService = {\r\n    saveCities(cities) {\r\n        let cityAsString = JSON.stringify(cities.filter( (c, i) => i < maxCitiesCountForSaving));\r\n\r\n        localStorage.setItem(keys.cities, cityAsString)\r\n        return Promise.resolve();\r\n    },\r\n\r\n    loadCities() {\r\n        const cities = JSON.parse(localStorage.getItem(keys.cities))\r\n        return Promise.resolve(cities || []);\r\n    }\r\n}","import {weatherApi} from \"./weatherApi\";\r\nimport {localStorageService as repositoryService} from \"./localStorageService\";\r\n\r\nexport const GET_WEATHER_SUCCESS = \"Weather/GET_WEATHER_SUCCESS\";\r\nexport const SET_CURRENT_CITY = \"Weather/SET_CURRENT_CITY\";\r\nexport const SET_ERROR = \"Weather/SET_ERROR\";\r\nexport const ADD_CITY = \"Weather/ADD_CITY\";\r\nexport const SET_CITIES = \"Weather/SET_CITIES\";\r\n\r\nconst initialState = {\r\n    city: null,\r\n    temp: null,\r\n    windSpeed: null,\r\n    dirOfWind: null,\r\n    cities: [],\r\n    isResponseFromServer: false,\r\n    error: null\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_WEATHER_SUCCESS:\r\n            debugger\r\n            let directionWind = action.dirOfWind;\r\n            if (action.dirOfWind = 0) {\r\n                directionWind = 'С'\r\n            } else if (action.dirOfWind > 0 && action.dirOfWind < 90) {\r\n                directionWind = 'СВ'\r\n            } else if (action.dirOfWind = 90) {\r\n                directionWind = 'В'\r\n            } else if (action.dirOfWind > 90 && action.dirOfWind < 180) {\r\n                directionWind = 'ЮВ'\r\n            } else if (action.dirOfWind = 180) {\r\n                directionWind = 'Ю'\r\n            } else if (action.dirOfWind > 180 && action.dirOfWind < 270) {\r\n                directionWind = 'ЮЗ'\r\n            } else if (action.dirOfWind = 270) {\r\n                directionWind = 'З'\r\n            } else if (action.dirOfWind > 270 && action.dirOfWind < 360) {\r\n                directionWind = 'СВ'\r\n            } else if (action.dirOfWind = 360) {\r\n                directionWind = 'С'\r\n            }\r\n            return {\r\n\r\n                ...state,\r\n                temp: action.temp,\r\n                windSpeed: action.windSpeed,\r\n                dirOfWind: directionWind\r\n            }\r\n        case SET_CURRENT_CITY: {\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            }\r\n        }\r\n        case ADD_CITY: {\r\n            return {\r\n                ...state,\r\n                cities: [action.city, ...state.cities]\r\n            }\r\n        }\r\n\r\n        case SET_CITIES: {\r\n            return {\r\n                ...state,\r\n                cities: action.cities\r\n            }\r\n        }\r\n        case SET_ERROR: {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getWeather = (title) => async (dispatch, getState) => {\r\n    let city = title;\r\n    let cities = getState().weatherPage.cities;\r\n\r\n    try {\r\n        const data = await weatherApi.getData(city);\r\n        // res.data.main.temp - temperature in kelvin\r\n        dispatch(getWeatherSuccess(data.main.temp, data.wind.speed, data.wind.deg))\r\n\r\n        // don't push the city which already is in list;\r\n        let compareCity = cities.filter(oldCity => oldCity.toUpperCase() === city.toUpperCase());\r\n        if (compareCity.length === 0) {\r\n            dispatch(addCity(city));\r\n            repositoryService.saveCities(getState().weatherPage.cities);\r\n        }\r\n        dispatch(setCurrentCity(title));\r\n        dispatch(setError(null));\r\n    } catch (errorMessage) {\r\n        dispatch(setError(errorMessage));\r\n    }\r\n}\r\nexport const loadCities = () => async (dispatch) => {\r\n    const cities = await repositoryService.loadCities();\r\n    dispatch(loadCitiesSuccess(cities));\r\n}\r\n\r\nexport const setCurrentCity = (city) => ({type: SET_CURRENT_CITY, city})\r\nexport const setError = (error) => ({type: SET_ERROR, error})\r\nexport const addCity = (city) => ({type: ADD_CITY, city})\r\nexport const loadCitiesSuccess = (cities) => ({type: SET_CITIES, cities});\r\nexport const getWeatherSuccess = (temp, speed, deg) => ({\r\n    type: GET_WEATHER_SUCCESS,\r\n    // 273.15 - is absolute zero\r\n    temp: Math.floor(temp - 273.15),\r\n    windSpeed: speed,\r\n    dirOfWind: deg\r\n})\r\n\r\n\r\nexport default reducer;","import React, {useState, useEffect} from 'react'\r\nimport style from './Weather.module.css'\r\nimport {connect} from 'react-redux'\r\nimport {getWeather, loadCities} from '../Redux/weatherReducer'\r\n\r\nconst Weather = (props) => {\r\n    const [title, setTitle] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        props.loadCities();\r\n    }, [])\r\n\r\n    const titleChanged = (e) => {\r\n        let cityName = e.currentTarget.value;\r\n        setTitle(cityName);\r\n    }\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        props.getWeather(title)\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className={style.weather}>\r\n            <h2 className={style.title}>Weather</h2>\r\n            {props.error && <div>{props.error}</div>}\r\n            <div>\r\n                <input onChange={titleChanged}\r\n                       placeholder=\"City...\"\r\n                       list=\"cities\"\r\n                       value={title}/>\r\n                <button onClick={submitForm} disabled={!title.trim().length}>\r\n                    Search\r\n                </button>\r\n                <datalist id=\"cities\">\r\n                    {props.cities.map(c => {\r\n                        return <option key={c} value={c}/>\r\n                    })}\r\n                </datalist>\r\n            </div>\r\n            {\r\n                !props.error &&\r\n                <>\r\n                    <span><b>{props.city}</b>: {props.temperature} ℃</span>\r\n                    <div>Wind speed: {props.windSpeed} м/с</div>\r\n                    <div>Wind direction: {props.directionOfTheWind}</div>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        city: state.weatherPage.city,\r\n        temperature: state.weatherPage.temp,\r\n        windSpeed: state.weatherPage.windSpeed,\r\n        directionOfTheWind: state.weatherPage.dirOfWind,\r\n        isResponseFromServer: state.weatherPage.isResponseFromServer,\r\n        cities: state.weatherPage.cities,\r\n        error: state.weatherPage.error\r\n\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadCities: () => {\r\n            dispatch(loadCities())\r\n        },\r\n        getWeather: (title) => {\r\n            dispatch(getWeather(title));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\r\n","import React from 'react';\nimport './App.css';\nimport Weather from './Components/Weather/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore,applyMiddleware,combineReducers} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport weatherReducer from './weatherReducer'\r\n\r\nconst reducer = combineReducers({\r\n    weatherPage: weatherReducer\r\n})\r\n\r\nconst store = createStore(reducer,applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Components/Redux/store';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}